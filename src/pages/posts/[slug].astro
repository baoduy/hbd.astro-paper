---
import { CollectionEntry, getCollection } from "astro:content";
import Posts from "@layouts/Posts.astro";
import PostDetails from "@layouts/PostDetails.astro";
import getSortedPosts from "@utils/getSortedPosts";
import getPageNumbers from "@utils/getPageNumbers";
import slugify from "@utils/slugify";
import { SITE } from "@config";

export interface Props {
  post: CollectionEntry<"blog">;
}

export async function getStaticPaths() {
  const posts = await getCollection("blog", ({ data }) => !data.draft);

  const postResult = posts.map(post => ({
    params: { slug: slugify(post.data) },
    props: { post },
  }));

  const pagePaths = getPageNumbers(posts.length).map(pageNum => ({
    params: { slug: String(pageNum) },
  }));

  return [...postResult, ...pagePaths];
}

const { slug } = Astro.params;
const { post } = Astro.props;
const posts = await getCollection("blog");
const sortedPosts = getSortedPosts(posts);

const totalPages = getPageNumbers(sortedPosts.length);
const currentPage =
  slug && !isNaN(Number(slug)) && totalPages.includes(Number(slug))
    ? Number(slug)
    : 0;

const lastPost = currentPage * SITE.postPerPage;
const startPost = lastPost - SITE.postPerPage;
const paginatedPosts = sortedPosts.slice(startPost, lastPost);

const currentPost = sortedPosts.findIndex(s=>s.data.postSlug === slug);
const previousPost = currentPost < sortedPosts.length - 1 ? sortedPosts[ currentPost + 1 ]?.data :undefined;
const nextPost = currentPost > 0 ? sortedPosts[ currentPost - 1 ]?.data : undefined;

const next = nextPost ? {title: nextPost.title , url:`/posts/${slugify(nextPost)}`} :undefined;
const previous = previousPost ? {title: previousPost.title , url:`/posts/${slugify(previousPost)}`} :undefined;
---

{
  post ? (
    <PostDetails post={post}
                 next={next}
                 previous={previous}/>
  ) : (
    <Posts
      posts={paginatedPosts}
      pageNum={currentPage}
      totalPages={totalPages.length}
    />
  )
}
